import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.plotting import autocorrelation_plot
from statsmodels.tsa.arima.model import ARIMA
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error
import math
from statsmodels.tsa.stattools import adfuller

# Download historical stock data
ticker = 'AAPL'  # Example: Apple stock
df = yf.download(ticker, start='2010-01-01', end='2023-12-31')

# Check the structure of the data
print(df.head())

# Set 'Date' as the index and keep only the 'Close' price
df = df[['Close']]

# Plot the closing price
plt.figure(figsize=(10,6))
plt.plot(df, label='Close Price')
plt.title(f"{ticker} Closing Price")
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()

# Plot autocorrelation
plt.figure(figsize=(10,6))
autocorrelation_plot(df['Close'])
plt.title('Autocorrelation of Closing Price')
plt.show()

# Perform Dickey-Fuller test to check for stationarity
def adf_test(series):
    result = adfuller(series)
    print(f'ADF Statistic: {result[0]}')
    print(f'p-value: {result[1]}')
    return result[1] <= 0.05  # If p-value is less than 0.05, data is stationary

# Check stationarity
is_stationary = adf_test(df['Close'])

# If not stationary, difference the data
if not is_stationary:
    df['Close_diff'] = df['Close'].diff().dropna()
else:
    df['Close_diff'] = df['Close']

# Build and train ARIMA model
model = ARIMA(df['Close_diff'], order=(5,1,0))  # (p,d,q) parameters
arima_model = model.fit()

# Print model summary
print(arima_model.summary())

# Forecast next 30 days
forecast = arima_model.forecast(steps=30)
print(forecast)

# Plot actual vs forecasted
plt.figure(figsize=(10,6))
plt.plot(df.index, df['Close'], label='Actual')
plt.plot(pd.date_range(df.index[-1], periods=30, freq='D'), forecast, label='Forecast', color='red')
plt.title('ARIMA Model Forecast')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()

# Prepare for LSTM model
# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df['Close'].values.reshape(-1,1))

# Prepare training and test datasets
train_size = int(len(scaled_data) * 0.80)
train_data = scaled_data[0:train_size]
test_data = scaled_data[train_size:]

# Create training sequences
def create_sequences(data, time_step=60):
    X, Y = [], []
    for i in range(len(data)-time_step-1):
        X.append(data[i:(i+time_step), 0])
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 60
X_train, Y_train = create_sequences(train_data, time_step)
X_test, Y_test = create_sequences(test_data, time_step)

# Reshape for LSTM input
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, Y_train, batch_size=1, epochs=1)

# Predict on test data
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Calculate RMSE
rmse = math.sqrt(mean_squared_error(Y_test, predictions))
print(f"Root Mean Squared Error (LSTM): {rmse}")

# Plot actual vs predicted prices
train = df[:train_size]
valid = df[train_size:]
valid['Predictions'] = predictions

plt.figure(figsize=(10,6))
plt.plot(train['Close'], label='Train Data')
plt.plot(valid[['Close', 'Predictions']], label=['Actual Price', 'Predicted Price'])
plt.title(f'{ticker} LSTM Model Predictions')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()
